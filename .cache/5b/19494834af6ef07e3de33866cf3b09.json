{"id":"node_modules/swup/lib/modules/getPageData.js","dependencies":[{"name":"/Users/dylanravel/Documents/GitHub/dylanravel.com/package.json","includedInParent":true,"mtime":1663817328068},{"name":"/Users/dylanravel/Documents/GitHub/dylanravel.com/node_modules/swup/package.json","includedInParent":true,"mtime":1663816852687},{"name":"../helpers","loc":{"line":7,"column":23,"index":103},"parent":"/Users/dylanravel/Documents/GitHub/dylanravel.com/node_modules/swup/lib/modules/getPageData.js","resolved":"/Users/dylanravel/Documents/GitHub/dylanravel.com/node_modules/swup/lib/helpers/index.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _helpers = require('../helpers');\n\nvar getPageData = function getPageData(request) {\n\t// this method can be replaced in case other content than html is expected to be received from server\n\t// this function should always return {title, pageClass, originalContent, blocks, responseURL}\n\t// in case page has invalid structure - return null\n\tvar html = request.responseText;\n\tvar pageObject = (0, _helpers.getDataFromHtml)(html, this.options.containers);\n\n\tif (pageObject) {\n\t\tpageObject.responseURL = request.responseURL ? request.responseURL : window.location.href;\n\t} else {\n\t\tconsole.warn('[swup] Received page is invalid.');\n\t\treturn null;\n\t}\n\n\treturn pageObject;\n};\n\nexports.default = getPageData;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/swup/lib/modules/getPageData.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}}],"sources":{"node_modules/swup/lib/modules/getPageData.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _helpers = require('../helpers');\n\nvar getPageData = function getPageData(request) {\n\t// this method can be replaced in case other content than html is expected to be received from server\n\t// this function should always return {title, pageClass, originalContent, blocks, responseURL}\n\t// in case page has invalid structure - return null\n\tvar html = request.responseText;\n\tvar pageObject = (0, _helpers.getDataFromHtml)(html, this.options.containers);\n\n\tif (pageObject) {\n\t\tpageObject.responseURL = request.responseURL ? request.responseURL : window.location.href;\n\t} else {\n\t\tconsole.warn('[swup] Received page is invalid.');\n\t\treturn null;\n\t}\n\n\treturn pageObject;\n};\n\nexports.default = getPageData;"},"lineCount":26}},"error":null,"hash":"f544a78824ef1f1e1be09092c8517689","cacheData":{"env":{}}}